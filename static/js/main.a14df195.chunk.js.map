{"version":3,"sources":["store/loading.ts","store/message.ts","helpers/api.ts","store/posts.ts","store/query.ts","store/downloading.ts","store/index.ts","components/User.tsx","components/Comment.tsx","components/CommentList.tsx","components/Post.tsx","components/PostList.tsx","components/Start.tsx","App.tsx","index.tsx"],"names":["reducer","loading","action","type","setMessage","message","API_URL","preparedPosts","a","Promise","all","fetch","then","response","json","posts","users","comments","map","post","user","find","userId","id","filter","comment","postId","postsReducer","queryReducer","query","visibility","rootReducer","combineReducers","loadingReducer","messageReducer","visibilityReducer","isLoading","state","isVisible","getVisiblePosts","createSelector","title","body","toLowerCase","includes","store","createStore","composeWithDevTools","applyMiddleware","thunk","User","name","email","address","className","street","suite","city","zipcode","Comment","dispatch","useDispatch","onClick","CommentList","key","Post","PostList","useSelector","useState","value","setValue","isHidden","setQueryWithDebounce","useCallback","debounce","placeholder","onChange","event","target","Start","postsFromServer","disabled","App","isHiddenButton","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a14df195.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n\n// Action types\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\n// Action creators\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst reducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\n// Action types\nconst SET_MESSAGE = 'SET_MESSAGE';\n\n// Action creators\nexport const setMessage = (message: string) => ({ type: SET_MESSAGE, message });\n\n// message reducer receives only the `state.message` part, but not the entire Redux state\nconst reducer = (message = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_MESSAGE:\n      return action.message;\n\n    default:\n      return message;\n  }\n};\n\nexport default reducer;\n","const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api';\n\nconst getPosts = () => {\n  return fetch(`${API_URL}/posts.json`)\n    .then(response => response.json());\n};\n\nconst getUsers = () => {\n  return fetch(`${API_URL}/users.json`)\n    .then(response => response.json());\n};\n\nconst getComments = () => {\n  return fetch(`${API_URL}/comments.json`)\n    .then(response => response.json());\n};\n\nexport const preparedPosts = async (): Promise<PreparedPost[]> => {\n  const [posts, users, comments] = await Promise.all([\n    getPosts(),\n    getUsers(),\n    getComments()\n  ]);\n\n  return posts.map((post: PreparedPost) => ({\n    ...post,\n    user: users.find((user: User) => post.userId === user.id),\n    comments: comments.filter((comment: Comment) => comment.postId === post.id),\n  }))\n};\n\n\n","import { AnyAction } from 'redux';\n\nconst SET_POSTS = 'SET_POSTS';\nconst REMOVE_POST = 'REMOVE_POST';\nconst REMOVE_COMMENT = 'REMOVE_COMMENT';\n\nexport const setPosts = (posts: PreparedPost[]) => ({ type: SET_POSTS, posts });\nexport const removePost = (id: number) => ({ type: REMOVE_POST, id});\nexport const removeComment = (id: number) => ({ type: REMOVE_COMMENT, id});\n\nconst postsReducer = (posts: PreparedPost[] = [], action: AnyAction) => {\n  switch(action.type) {\n    case SET_POSTS:\n      return action.posts;\n    case REMOVE_POST:\n      return posts.filter((post: PreparedPost) => post.id !== action.id)\n    case REMOVE_COMMENT:\n      return posts.map(post => ({\n        ...post,\n        comments: post.comments.filter(comment => comment.id !== action.id)\n      }))\n    default:\n      return posts;\n  }\n}\n\nexport default postsReducer;\n\n","import { AnyAction } from 'redux';\n\nconst SET_QUERY = 'SET_QUERY';\n\nexport const setQuery = (query: string) => ({ type: SET_QUERY, query });\n\nconst queryReducer = (query = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_QUERY:\n    return action.query\n    default:\n      return query;\n  };\n};\n\nexport default queryReducer;\n","import { AnyAction } from 'redux';\n\nconst VISIBILITY = 'VISIBILITY';\n\nexport const visibility = () => ({ type: VISIBILITY });\n\nconst reducer = (visibility= false, action: AnyAction) => {\n  switch(action.type) {\n    case VISIBILITY:\n      return true;\n    default:\n      return visibility;\n  };\n};\n\nexport default reducer;\n","import { createStore, combineReducers, applyMiddleware, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\nimport { createSelector } from 'reselect';\n\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport messageReducer, { setMessage } from './message';\nimport { preparedPosts } from '../helpers/api';\nimport postsReducer, { setPosts } from './posts';\nimport queryReducer from './query';\nimport visibilityReducer, { visibility } from './downloading';\n\n/**\n * Each concrete reducer will receive all the actions but only its part of the state\n *\n * const rootReducer = (state = {}, action) => ({\n *   loading: loadingReducer(state.loading, action),\n *   message: messageReducer(state.message, action),\n * })\n */\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  message: messageReducer,\n  posts: postsReducer,\n  query: queryReducer,\n  visibility: visibilityReducer,\n});\n\n// We automatically get types returned by concrete reducers\nexport type RootState = ReturnType<typeof rootReducer>;\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const isLoading = (state: RootState) => state.loading;\nexport const getMessage = (state: RootState) => state.message;\nexport const getPosts = (state: RootState) => state.posts;\nexport const getQuery = (state: RootState) => state.query;\nexport const isVisible = (state: RootState) => state.visibility;\n\nexport const getVisiblePosts = createSelector(\n  getPosts,\n  getQuery,\n\n  (posts: PreparedPost[], query: string) => {\n    return [...posts]\n      .filter(post => (post.title + post.body)\n        .toLowerCase()\n        .includes(query.toLowerCase()));\n  }\n)\n/**\n * Thunk - is a function that should be used as a normal action creator\n *\n * dispatch(loadMessage())\n */\nexport const loadData = () => {\n  // inner function is an action handled by Redux Thunk\n  return async (dispatch: Dispatch<AnyAction>) => {\n    dispatch(startLoading());\n    dispatch(visibility())\n    try {\n      const postsFromServer = await preparedPosts();\n\n      dispatch(setMessage('Data is received'));\n      dispatch(setPosts(postsFromServer))\n    } catch (error) {\n      dispatch(setMessage('Error occurred when loading data'));\n    }\n\n    dispatch(finishLoading());\n  };\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\n\ntype UserProps = {\n  user: User;\n};\n\nexport const User: React.FC<UserProps> = ({ user }) => {\n  const { name, email, address } = user;\n\n  return (\n    <div className=\"post__user\">\n      <p>{name}</p>\n      <p>{email}</p>\n      <p>{address.street}</p>\n      <p>{address.suite}</p>\n      <p>{address.city}</p>\n      <p>{address.zipcode}</p>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { removeComment } from '../store/posts';\n\ntype Props = {\n  comment: Comment;\n};\n\nexport const Comment: React.FC<Props> = ({ comment }) => {\n  const { name, body, email } = comment;\n  const dispatch = useDispatch();\n\n  return (\n    <div className=\"post__comment\">\n      <p>{name}</p>\n      <p>{body}</p>\n      <p>{email}</p>\n      <button\n        type=\"button\"\n        className=\"button\"\n        onClick={() => dispatch(removeComment(comment.id))}\n      >Remove</button>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Comment } from './Comment';\n\ntype PropsComment = {\n  comments: Comment[];\n};\n\nexport const CommentList: React.FC<PropsComment> = ({ comments }) => {\n  return (\n    <>\n      <h2>Comments</h2>\n      {comments.map(comment => <Comment key={comment.id} comment={comment} />)}\n    </>\n  );\n};\n","import React from 'react';\nimport { User } from './User';\nimport { CommentList } from './CommentList';\nimport { useDispatch } from 'react-redux';\nimport { removePost } from '../store/posts';\n\ntype PropsPost = {\n  post: PreparedPost;\n};\n\nexport const Post: React.FC<PropsPost> = ({ post }) => {\nconst dispatch = useDispatch();\n\n  return (\n    <>\n      <li className=\"post__item\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => dispatch(removePost(post.id))}\n        >Remove</button>\n        <h2>{post.title}</h2>\n        <p>{post.body}</p>\n        <User user={post.user} />\n        <CommentList comments={post.comments} />\n      </li>\n    </>\n  );\n};\n","import React, { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {  getVisiblePosts, isVisible } from '../store';\nimport { Post } from './Post';\nimport { setQuery } from '../store/query';\nimport debounce from 'lodash.debounce';\n\nconst PostList = () => {\n  const posts: PreparedPost[] = useSelector(getVisiblePosts);\n  const dispatch = useDispatch();\n  const [value, setValue] = useState('');\n  const isHidden = useSelector(isVisible);\n\n  const setQueryWithDebounce = useCallback(\n    debounce((value: string) => dispatch(setQuery(value)), 500), []\n  )\n\n  const handleChange = (event: React.FormEvent<HTMLInputElement>) => {\n    const { value } = event.target as HTMLInputElement;\n    setValue(value)\n    setQueryWithDebounce(value);\n  }\n\n  return (\n    <>\n      {isHidden &&\n      <input\n        className=\"post__input\"\n        placeholder=\"Enter words for searching\"\n        type=\"text\"\n        value={value}\n        onChange={handleChange}\n      />}\n      <ul className=\"post__list\">\n        {posts.map((post) => (\n          <Post key={post.id} post={post} />\n        ))}\n      </ul>\n      </>\n  )\n};\n\nexport default PostList;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { isLoading, loadData } from '../store';\n\nexport const Start = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n\n  return (\n    <button\n      type=\"button\"\n      className=\"button\"\n      onClick={() => dispatch(loadData())}\n      disabled={loading}\n    >\n      {loading ? 'Loading...' : 'Load'}\n    </button>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport PostList from './components/PostList';\n\nimport './App.scss';\nimport { Start } from './components/Start';\n\nimport { isLoading, isVisible } from './store';\n\nconst App = () => {\n  const loading = useSelector(isLoading);\n  const isHiddenButton = useSelector(isVisible);\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of posts</h1>\n      {!isHiddenButton && <Start />}\n     {loading ? 'Loading...' : <PostList />}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}